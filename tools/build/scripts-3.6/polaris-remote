#!/apps/software/standard/core/anaconda/5.2.0-py3.6/bin/python
# -*- coding: utf-8 -*-

"""polaris-remote is part of the PolarisTools package to manage and control
POLARIS related files on an external server.

Examples:
    For usage information please execute:
        $ ./polaris-remote --help
"""

import os
from argparse import RawTextHelpFormatter, ArgumentParser

__author__ = "Robert Brauer"
__license__ = "GPL"
__version__ = "3.0"
__maintainer__ = "Robert Brauer"
__email__ = "robert.brauer@cea.fr"
__status__ = "Production"

'''
The ArgumentParser is used to obtain the non-optional and optional user input.

Notes:
    Default values of the ArgumentParser are set with None. Unless an option is set/chosen,
    the PolarisTools classes use their default values.
'''

parser = ArgumentParser(
    description='PolarisTools_prepare, an user interface to remote POLARIS:',
    formatter_class=RawTextHelpFormatter)

req_args = parser.add_argument_group('required arguments')
req_args.add_argument('server_name', metavar='server_name',
                      default=None, help='choose server/cluster to exchange files between local computer and server.')
req_args.add_argument('user_id', metavar='user_id', default=None, type=str,
                      help='define username/userid to login onto server/cluster.')

push_args = parser.add_argument_group('push to server')
push_args.add_argument('--push_polaris_package', dest='push_polaris_package', default=False, action='store_true',
                       help='push the PolarisTools package to server (use this, if POLARIS does not exist on server).')
push_args.add_argument('--push_polaris_sources', dest='push_polaris_sources', default=False, action='store_true',
                       help='push all POLARIS files to server.')
push_args.add_argument('--push_polaris_input', dest='push_polaris_input', default=False, action='store_true',
                       help='push POLARIS input files to server (to update POLARIS gas dust files).')
push_args.add_argument('--push_polaris_tests', dest='push_polaris_tests', default=False, action='store_true',
                       help='push POLARIS test simulations to server.')
push_args.add_argument('--pull_polaris_tests', dest='pull_polaris_tests', default=False, action='store_true',
                       help='pull POLARIS test simulations from server.')
push_args.add_argument('--push_polaris', dest='push_polaris', default=False, action='store_true',
                       help='push POLARIS sources to server (to update an existing POLARIS installation).')
push_args.add_argument('--push_file', dest='path_to_file', default=None,
                       help='push file to PolarisTools directory on server.')
push_args.add_argument('--push', dest='push', default=False, action='store_true',
                       help='push POLARIS results defined by MODEL_NAME and SIMULATION_NAME to server.')
push_args.add_argument('--push_all', dest='push_all', default=False, action='store_true',
                       help='push all POLARIS results defined by MODEL_NAME to server.')

pull_args = parser.add_argument_group('pull from server')
pull_args.add_argument('--pull', dest='pull', default=False, action='store_true',
                       help='pull polaris results defined by MODEL_NAME and SIMULATION_NAME from server.')
pull_args.add_argument('--pull_all', dest='pull_all', default=False, action='store_true',
                       help='pull all POLARIS results defined by MODEL_NAME from server.')

path_args = parser.add_argument_group('paths')
path_args.add_argument('--model', dest='model_name', type=str, default=None,
                       help='define the name of the POLARIS model.')
path_args.add_argument('--simulation', dest='simulation_name', type=str, default=None,
                       help='define the name of the simulation.')

other_args = parser.add_argument_group('other')
other_args.add_argument('--exclude', dest='exclude', default=None, type=str,
                        help='define what to exclude from pull/push from/to server.')
parser_options = parser.parse_args()


class RemoteRoutines:
    """Manages how POLARIS, POLARIS results, and PolarisTools can be pushed or pulled from server.
    And it offers an options to compile POLARIS local or on server.
    """

    def __init__(self, parse_args):
        """Initialise all necessary modules.

        Args:
            parse_args: Provides all parameters chosen
                by user when executing PolarisTools.
        """
        self.parse_args = parse_args

        ''' #################################
        ######  Get required modules!  ######
        ################################# '''
        # Get model module
        from polaris_tools_modules.model import ModelChooser
        model_chooser = ModelChooser(parse_args)
        self.model = model_chooser.get_module()

        # Get server/cluster module
        from polaris_tools_modules.server import ServerChooser
        server_chooser = ServerChooser(parse_args, 'remote')
        self.server = server_chooser.get_module()

        # Get file input/output module
        from polaris_tools_modules.file import FileIO
        self.file_io = FileIO(self.model, self.server,
                              parse_args, '/sfs/qumulo/qhome/zdl3gk/coding/c++/polaris_code/polaris/', 'remote')

        self.rsync_cmd = 'rsync -vr -l -e ssh  --progress '

    def push_polaris_package(self):
        """Push complete POLARIS package to server.
        """
        print('--- Push POLARIS package to ' +
              self.file_io.path['server'] + ' ...')
        os.chdir(self.file_io.path['polaris'])
        os.system('./create_polaris_installer.sh')
        os.system(self.rsync_cmd + self.file_io.path['polaris'] +
                  '/polaris.run ' + self.file_io.path['server'])
        print('--- Now login to the cluster server and execute ./polaris.run!')

    def push_polaris_sources(self):
        """Push POLARIS sources to server.
        """
        print('--- Push POLARIS sources to ' +
              self.file_io.path['server'] + ' ...')
        os.system(
            self.rsync_cmd + '--include=src/ --include=tools/ --include=tools/src/ ' +
            '--include=modules/ --include=custom/ --include=*.cpp --include=*.cc --include=*.h ' +
            '--include=*.hh --exclude=Makefile.in --include=src/*.in --include=*.py --include=*.sh ' +
            '--exclude=* ' + self.file_io.path['polaris'] + ' ' + self.file_io.path['server_polaris'])

    def push_polaris_input(self):
        """Push POLARIS sources to server.
        """
        print('--- Push POLARIS input files to ' +
              self.file_io.path['server'] + ' ...')
        os.system(
            self.rsync_cmd + '--include=input/ --include=input/dust/ --include=input/dust/*/ ' +
            '--include=input/gas/ --include=*.dct --include=*.lot --include=*.dat --include=*.sca '
            '--include=*.inf --exclude=* ' +
            self.file_io.path['polaris'] + ' ' + self.file_io.path['server_polaris'])

    def push_polaris_tests(self):
        """Push POLARIS test files to server.
        """
        print('--- Push POLARIS test files to ' +
              self.file_io.path['server'] + ' ...')
        os.system(
            self.rsync_cmd + '--include=testing/ --include=testing/*/ ' +
            '--include=testing/*/results_correct/ --include=*.dat --include=template.cmd '
            '--include=*.fits --exclude=* ' +
            self.file_io.path['polaris'] + ' ' + self.file_io.path['server_polaris'])

    def pull_polaris_tests(self):
        """Pull POLARIS test files to server.
        """
        print('--- Pull POLARIS test files from ' +
              self.file_io.path['server'] + ' ...')
        os.system(
            self.rsync_cmd + '--include=testing/ --include=testing/*/ ' +
            '--include=testing/*/results_correct/ --include=*.dat --include=template.cmd '
            '--include=*.fits --exclude=* ' +
            self.file_io.path['server_polaris'] + ' ' + self.file_io.path['polaris'])

    def push_polaris(self):
        """Push POLARIS sources to server.
        """
        print('--- Push all POLARIS files to ' +
              self.file_io.path['server'] + ' ...')
        os.system(
            self.rsync_cmd + '--include=.git/ --exclude=projects/ --exclude=testing/*/results/ ' +
            self.file_io.path['polaris'] + ' ' + self.file_io.path['server_polaris'])

    def push_file(self, path_to_file):
        """Push a file to PolarisTools on server.

        Args:
            path_to_file (str): Path to file that has to be pushed to server.
        """
        print('--- Push file to ' +
              self.file_io.path['server_polaris'] + ' ...')
        os.system(self.rsync_cmd + path_to_file + ' ' +
                  self.file_io.path['server_polaris'])

    def push_polaris_results(self, all_simulations=False, exclude=''):
        """Push POLARIS results to server.

        Args:
            all_simulations (bool): Enables the push of all simulations to server.
            exclude (str): Exclude files matching this string from pushing on server.
        """
        if self.parse_args.exclude is not None:
            exclude = self.parse_args.exclude

        print('--- Push POLARIS results to ' +
              self.file_io.path['server'] + ' ...')
        if all_simulations:
            os.system(self.rsync_cmd + '--exclude=' + exclude + ' ' + self.file_io.path['model'] + '/ ' +
                      self.file_io.path['server_model'] + '/')
        else:
            os.system(self.rsync_cmd + '--exclude=' + exclude + ' ' + self.file_io.path['simulation'] + '/ ' +
                      self.file_io.path['server_simulation'] + '/')

    def pull_polaris_results(self, all_simulations=False, exclude=''):
        """Pull POLARIS results from server.

        Args:
            all_simulations (bool): Enables the pull of all simulations from server.
            exclude (str): Exclude files matching this string from pulling from server.
        """
        if self.parse_args.exclude is not None:
            exclude = self.parse_args.exclude

        print('--- Pull POLARIS sources to ' +
              self.file_io.path['server'] + ' ...')
        if all_simulations:
            os.system(self.rsync_cmd + '--exclude=' + exclude + ' ' + self.file_io.path['server_model'] + '/ ' +
                      self.file_io.path['model'] + '/')
        else:
            os.system(self.rsync_cmd + '--exclude=' + exclude + ' ' + self.file_io.path['server_simulation'] +
                      '/ ' + self.file_io.path['simulation'] + '/')


if __name__ == '__main__':
    print('------------------------- PolarisTools -------------------------')
    print('--- Initialization ...')
    #: Instance of RunRoutines which can manage POLARIS execution
    remote_routines = RemoteRoutines(parser_options)
    print('--- Initialization finished!')

    print('--- Remote control POLARIS ...')
    if parser_options.server_name is not None:
        if parser_options.push_polaris:
            # Push POLARIS sources to server
            remote_routines.push_polaris()
        elif parser_options.push_polaris_package:
            # Push POLARIS package to server
            remote_routines.push_polaris_package()
        elif parser_options.push_polaris_sources:
            # Push POLARIS input files to server
            remote_routines.push_polaris_sources()
        elif parser_options.push_polaris_input:
            # Push POLARIS input files to server
            remote_routines.push_polaris_input()
        elif parser_options.push_polaris_tests:
            # Push POLARIS input files to server
            remote_routines.push_polaris_tests()
        elif parser_options.pull_polaris_tests:
            # Pull POLARIS input files from server
            remote_routines.pull_polaris_tests()
        elif parser_options.path_to_file is not None:
            # Push file to PolarisTools on server
            remote_routines.push_file(parser_options.path_to_file)
        elif parser_options.push:
            if parser_options.model_name is not None and \
                    parser_options.simulation_name is not None:
                # Push simulation results from simulation name to server
                remote_routines.push_polaris_results()
            else:
                raise ValueError(
                    'For pushing simulations, the model name and simulation name is needed!')
        elif parser_options.push_all:
            if parser_options.model_name is not None:
                # Push all simulation results from model to server
                remote_routines.push_polaris_results(all_simulations=True)
            else:
                raise ValueError(
                    'For pushing all simulations of a model, the model name is needed!')
        elif parser_options.pull:
            if parser_options.model_name is not None and \
                    parser_options.simulation_name is not None:
                # Pull simulation results from simulation name from server
                remote_routines.pull_polaris_results()
            else:
                raise ValueError(
                    'For pulling simulations, the model name and simulation name is needed!')
        elif parser_options.pull_all:
            if parser_options.model_name is not None:
                # Pull all simulation results from model from server
                remote_routines.pull_polaris_results(all_simulations=True)
            else:
                raise ValueError(
                    'For pulling all simulations of a model, the model name is needed!')
        else:
            raise ValueError('No valid polaris-remote command!')
    else:
        raise ValueError(
            'Remote server is not set but needed for the chosen command!')
    print('--- Remote control POLARIS finished!')
