#!/apps/software/standard/core/anaconda/5.2.0-py3.6/bin/python
# -*- coding: utf-8 -*-

"""polaris-extra is part of the PolarisTools package and can be used
to create and convert files, which are used by POLARIS.

Examples:
    For usage information please execute:
        $ ./polaris-extra --help
"""

from argparse import RawTextHelpFormatter, ArgumentParser

__author__ = "Robert Brauer"
__license__ = "GPL"
__version__ = "3.0"
__maintainer__ = "Robert Brauer"
__email__ = "robert.brauer@cea.fr"
__status__ = "Production"

'''
The ArgumentParser is used to obtain the non-optional and optional user input.

Notes:
    Default values of the ArgumentParser are set with None. Unless an option is set/chosen,
    the PolarisTools classes use their default values.
'''

parser = ArgumentParser(
    description='PolarisTools_extra, an user interface to create/convert POLARIS files:',
    formatter_class=RawTextHelpFormatter)

create_args = parser.add_argument_group('creation')
create_args.add_argument('--create_zeeman', dest='gas_species', default=None, type=str,
                         help='creates a Zeeman input file for the chosen GAS_SPECIES.')
create_args.add_argument('--create_dust', dest='dust_name', type=str,
                         help='creates dust component files for POLARIS.')

conv_args = parser.add_argument_group('conversion')
conv_args.add_argument('--convert_jpl', dest='jpl_index', default=None, type=str,
                       help='converts a JPL database file (with JPL_INDEX) to the LAMBDA database format.')
conv_args.add_argument('--convert_cdms', dest='cdms_index', default=None, type=str,
                       help='converts a CDMS database file (with CDMS_INDEX) to the LAMBDA database format.')

visual_args = parser.add_argument_group('visualization')
visual_args.add_argument('--info', dest='dust_composition', default=None, type=str,
                         help='prints possible wavelengths and dust grain sizes for a chosen dust composition.')

parser_options = parser.parse_args()


class ExtraRoutines:
    """Manages the creation or conversion of files used by POLARIS.
    """

    def __init__(self, parse_args):
        """Initialise all necessary modules which are required by polaris-extra

        Args:
            parse_args: Provides all parameters chosen
                by user when executing PolarisTools.
        """
        self.parse_args = parse_args

        ''' #################################
        ######  Get required modules!  ######
        ################################# '''

        # Set model module as None
        parse_args.model_name = None
        self.model = None

        # Get server/cluster module
        from polaris_tools_modules.server import ServerChooser
        server_chooser = ServerChooser(parse_args, 'extra')
        self.server = server_chooser.get_module()

        # Get file input/output module
        from polaris_tools_modules.file import FileIO
        self.file_io = FileIO(self.model, self.server,
                              parse_args, '/sfs/qumulo/qhome/zdl3gk/coding/c++/polaris_code/polaris/', 'extra')

        # Get gas creator module
        from polaris_tools_modules.create_gas import GasCreator
        self.gas_creator = GasCreator(self.file_io, parse_args)

    def convert_database(self, database, database_code):
        self.gas_creator.convert_database(database, database_code)

    def create_zeeman_file(self):
        self.gas_creator.create_zeeman_file()

    def create_dust_catalog(self):
        # Get dust module
        from polaris_tools_modules.dust import DustChooser
        dust_chooser = DustChooser(self.file_io, self.parse_args, self.model)
        self.dust = dust_chooser.get_module_from_name(
            self.parse_args.dust_name, user_input=False)
        self.dust.create_catalog()

    def visual_dust_catalog(self):
        # Get dust module
        from polaris_tools_modules.dust import DustChooser
        dust_chooser = DustChooser(self.file_io, self.parse_args)
        self.dust = dust_chooser.get_module_from_name(self.parse_args.dust_composition,
                                                      user_input=False)
        self.dust.print_info(microns=True)


if __name__ == '__main__':
    print('---------------------- PolarisToolsExtra ----------------------')
    print('--- Initialization ...')
    #: Instance of PlotRoutines which can manage POLARIS plot creation
    extra_routines = ExtraRoutines(parser_options)
    print('--- Initialization finished!')

    if parser_options.jpl_index is not None:
        print('--- Convert JPL database file...')
        extra_routines.convert_database('jpl', parser_options.jpl_index)
        print('--- Conversion of JPL database file finished!')
    elif parser_options.cdms_index is not None:
        print('--- Convert CDMS database file...')
        extra_routines.convert_database('cdms', parser_options.cdms_index)
        print('--- Conversion of CDMS database file finished!')
    elif parser_options.gas_species is not None:
        print('--- Create Zeeman file...')
        extra_routines.create_zeeman_file()
        print('--- Creation of Zeeman file finished!')
    elif parser_options.dust_name is not None:
        print('--- Create dust component...')
        extra_routines.create_dust_catalog()
        print('--- Creation of dust component finished!')
    elif parser_options.dust_composition is not None:
        print('--- Show dust component info...')
        extra_routines.visual_dust_catalog()
        print('--- Show dust component info finished!')
    else:
        raise ValueError(
            'No valid execution of polaris-extra found (Try --help for usage)!')
